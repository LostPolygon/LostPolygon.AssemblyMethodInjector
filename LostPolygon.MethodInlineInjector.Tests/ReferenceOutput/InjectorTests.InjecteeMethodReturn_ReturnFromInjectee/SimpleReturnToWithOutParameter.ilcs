.method public hidebysig
    instance void WithOutParameter (
        int32 a,
        int32 b,
        [out] float32& c
    ) cil managed
{
    // Method begins at RVA 0x2172
    // Code size 53 (0x35)
    .maxstack 8
    .locals (
        [0] bool
    )

    IL_0000: nop
    IL_0001: ldstr "Injectee: Begin"
    IL_0006: call void [mscorlib]System.Console::WriteLine(string)
    IL_000b: nop
    IL_000c: ldarg.3
    IL_000d: ldarg.1
    IL_000e: ldarg.2
    IL_000f: add
    IL_0010: conv.r4
    IL_0011: stind.r4
    IL_0012: ldstr "Injectee: c = a + b = "
    IL_0017: ldarg.3
    IL_0018: ldind.r4
    IL_0019: box [mscorlib]System.Single
    IL_001e: call string [mscorlib]System.String::Concat(object, object)
    IL_0023: call void [mscorlib]System.Console::WriteLine(string)
    IL_0028: nop
    IL_0029: ldstr "Injectee: End"
    IL_002e: call void [mscorlib]System.Console::WriteLine(string)
    IL_0033: nop
    IL_0034: nop
    IL_0035: nop
    IL_0036: ldstr "Injected: Begin"
    IL_003b: call void [mscorlib]System.Console::WriteLine(string)
    IL_0040: nop
    IL_0041: call bool [mscorlib]System.Environment::get_UserInteractive()
    IL_0046: stloc.0
    IL_0047: ldloc.0
    IL_0048: brfalse.s IL_0058
    IL_004a: nop
    IL_004b: ldstr "Injected: Environment.UserInteractive is true, returning"
    IL_0050: call void [mscorlib]System.Console::WriteLine(string)
    IL_0055: nop
    IL_0056: br.s IL_0063
    IL_0058: ldstr "Injected: End"
    IL_005d: call void [mscorlib]System.Console::WriteLine(string)
    IL_0062: nop
    IL_0063: ret
} // end of method TestInjectee::WithOutParameter

// End of IL code

public void WithOutParameter(int a, int b, out float c)
{
    Console.WriteLine("Injectee: Begin");
    c = (float)(a + b);
    Console.WriteLine("Injectee: c = a + b = " + c);
    Console.WriteLine("Injectee: End");
    Console.WriteLine("Injected: Begin");
    bool userInteractive = Environment.UserInteractive;
    if (userInteractive)
    {
        Console.WriteLine("Injected: Environment.UserInteractive is true, returning");
    }
    else
    {
        Console.WriteLine("Injected: End");
    }
}
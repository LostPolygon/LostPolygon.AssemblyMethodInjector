.method public hidebysig
    instance void WithRefParameter (
        int32 a,
        float32& b
    ) cil managed
{
    // Method begins at RVA 0x2135
    // Code size 60 (0x3c)
    .maxstack 8
    .locals (
        [0] bool
    )

    IL_0000: nop
    IL_0001: ldstr "Injectee: Begin"
    IL_0006: call void [mscorlib]System.Console::WriteLine(string)
    IL_000b: nop
    IL_000c: ldarg.2
    IL_000d: ldarg.2
    IL_000e: ldind.r4
    IL_000f: ldc.r4 3.14
    IL_0014: add
    IL_0015: stind.r4
    IL_0016: ldstr "Injectee: a + b = "
    IL_001b: ldarg.1
    IL_001c: conv.r4
    IL_001d: ldarg.2
    IL_001e: ldind.r4
    IL_001f: add
    IL_0020: box [mscorlib]System.Single
    IL_0025: call string [mscorlib]System.String::Concat(object, object)
    IL_002a: call void [mscorlib]System.Console::WriteLine(string)
    IL_002f: nop
    IL_0030: ldstr "Injectee: End"
    IL_0035: call void [mscorlib]System.Console::WriteLine(string)
    IL_003a: nop
    IL_003b: nop
    IL_003c: nop
    IL_003d: ldstr "Injected: Begin"
    IL_0042: call void [mscorlib]System.Console::WriteLine(string)
    IL_0047: nop
    IL_0048: call bool [mscorlib]System.Environment::get_UserInteractive()
    IL_004d: stloc.0
    IL_004e: ldloc.0
    IL_004f: brfalse.s IL_005f
    IL_0051: nop
    IL_0052: ldstr "Injected: Environment.UserInteractive is true, returning"
    IL_0057: call void [mscorlib]System.Console::WriteLine(string)
    IL_005c: nop
    IL_005d: br.s IL_006a
    IL_005f: ldstr "Injected: End"
    IL_0064: call void [mscorlib]System.Console::WriteLine(string)
    IL_0069: nop
    IL_006a: ret
} // end of method TestInjectee::WithRefParameter

// End of IL code

public void WithRefParameter(int a, ref float b)
{
    Console.WriteLine("Injectee: Begin");
    b += 3.14f;
    Console.WriteLine("Injectee: a + b = " + ((float)a + b));
    Console.WriteLine("Injectee: End");
    Console.WriteLine("Injected: Begin");
    bool userInteractive = Environment.UserInteractive;
    if (userInteractive)
    {
        Console.WriteLine("Injected: Environment.UserInteractive is true, returning");
    }
    else
    {
        Console.WriteLine("Injected: End");
    }
}